managed implementation in class zbp_ats_ak_travel unique;
// Strict Indicates the level of syntax and checking that needs to be followed
strict ( 2 );

// Enable DRAFT feature to save intermediate data
with draft;

// Define the root behavior entity
define behavior for ZATS_AK_TRAVEL alias Travel

// Specify the behavior pool class name for travel Entity.
// also, 'unique' indicates that there cant be more behaviour pools created for Travel
implementation in class zbp_ats_ak_travel unique

// Persistent table indicates the db table on which Travel request is to be created/updated
persistent table /dmo/travel_m

// Lock master indicates how RAP should handle locks. i.e, if travel request is locked,
// its children like Booking and BookSuppl is not permitted
lock master

// Since draft table is used below, its mandatory to use total etag command
total etag LastChangedAt

authorization master ( instance )

// Specify the draft table - will be created automatically by RAP framework
draft table zats_ak_draft_tb

// to control concurrency
etag master LastChangedAt
early numbering // This is to ensure that Travel ID is created with number range from system
with additional save // This is 'Additional Save' feature to implement log mechanism during travel request save process
{
  // These operations are generated by RAP automatically(its a managed scenario)
  create ( precheck ); //Precheck is added to validate data before saving it in DRAFT table
  update ( precheck ); //Precheck is added to validate data before saving it in DRAFT table
  delete;
  // This indicates that Booking can only be created if a Travel requested is created
  association _Booking { create ( features : instance ); with draft; } // (features : instance) is added to introduce dynamic feature control
  // That is, a booking should not be created if Travel is created with Overall Status as rejected. 'with draft' enables draft for booking

  // This indicates that Attachment can only be created if a Travel requested is created
  association _Attachment { create; with draft; }

  // This is done as a part of 'Determination' to recalculate Total Price based on sum of booking item prices
  // Internal action is a method that is intended to be consumed within in RAP BO and not outside world.
  internal action reCalcTotalPrice;
  // Define 'Determination' to be execute code when booking fee or currency code is changed so that total price
  //   can be calculated
  // 'on modify' in below code  indicates that the code should be executed whenever a change is made to a BO instance.
  // The other option is 'on save' which means the code will be executed while saving only
  determination calculateTotalPrice on modify
  { // indicates that calculateTotalPrice is triggered when a request is created
    //       only when fields BookingFee, CurrencyCode are modified. If changes made to any other fields, this will not be triggered.
    create; field BookingFee, CurrencyCode; }

  // Custom validations. This can be done during SAVE(create) or Modify operations as well.
  // Specify fields after 'field' to perform validation only if those fields are changed. Else close it after create
  validation validateHeaderData on save { create; field CustomerId, BeginDate, EndDate; }

  // Static Feature Control - To make all the below mentioed fields read-only
  field ( readonly ) TravelId, CreatedBy, CreatedAt, LastChangedBy, LastChangedAt, TotalPrice;
  // Static Feature Control - To make all the below mentioed fields mandatory
  field ( mandatory ) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

  // We are creating a factory Data Action(refer data actions)
  // This is an instance bound data action
  factory action copyTravel [1]; // 1 indicates the cardinality that how many records are returned.

  // Approver Scenario- Non factory actions that will change the state of BO instance
  // (features : instance) is added to enable dynamic feature control to disable Approve & Reject buttons
  //   for requests that are already having status as 'Approved'
  action ( features : instance ) acceptTravel result [1] $self; //$self means it will return own object
  action ( features : instance ) rejectTravel result [1] $self; //$self means it will return own object

  //create a new determine action
  determine action validationCustomer { validation validateHeaderData; }

  // Side-effects informs RAP to reload the Total Price if the Booking Fee is changed in frontend
  side effects
  {
    field BookingFee affects field TotalPrice;
    determine action validationCustomer executed on field CustomerId affects messages;
  }

  // Mandatory to add the below draft actions to remove syntax errors. No need to code anything on these
  draft determine action Prepare;
  draft action Edit;
  draft action Resume;
  draft action Activate;
  draft action Discard;

  // We need to explicityly provide field mapping here to avoild dump
  // as the field names in root view ZATS_AK_TRAVEL and db table /dmo/travel_m are different
  mapping for /dmo/travel_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      TotalPrice    = total_price;
      BookingFee    = booking_fee;
      CurrencyCode  = currency_code;
      Description   = description;
      OverallStatus = overall_status;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
    }
}

// Define the child behavior entity
define behavior for ZATS_AK_BOOKING alias Booking
// Specify the behavior pool class name for booking Entity. Its good to craete separate class compared to Travel
// also, 'unique' indicates that there cant be more behaviour pools created for booking
implementation in class zbp_ats_ak_booking unique
persistent table /dmo/booking_m
lock dependent by _Travel
authorization dependent by _Travel

// Specify the draft table - will be created automatically by RAP framework
draft table zats_ak_dr_book

etag master LastChangedAt
early numbering // This is to ensure that Booking ID is created with number range from system
{
  update;
  delete;
  field ( readonly ) TravelId, BookingId;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;
  // Reconfirm that booking will be created with DRAFT feature
  association _Travel { with draft; }
  association _BookingSupplement { create; with draft; }

  // Define 'Determination' to recalculat total travel price when its booking's Flight Price or Currency is changed
  // This calculation will happen everytime we modify FlightPrice or CurrencyCode of a booking both during creation & editing
  determination calculateTotalPrice on modify
  { // indicates that calculateTotalPrice is triggered when a request is created
    //       only when fields FlightPrice, CurrencyCode are modified. If changes made to any other fields, this will not be triggered.
    field FlightPrice, CurrencyCode; }

  // Side-effects informs RAP to reload the Total Price if the FlightPrice is changed in frontend
  side effects
  {
    field FlightPrice affects field _Travel.TotalPrice;
  }

  // We need to explicityly provide field mapping here to avoild dump
  // as the field names in root view ZATS_AK_BOOKING and db table /dmo/booking_m are different
  mapping for /dmo/booking_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }
}

// Define the child behavior entity
define behavior for ZATS_AK_BOOKSUPPL alias BookSuppl
// Specify the behavior pool class name for booksuppl Entity. Its good to craete separate class compared to Travel
// also, 'unique' indicates that there cant be more behaviour pools created for booksuppl
implementation in class zbp_ats_ak_booksuppl unique
persistent table /dmo/booksuppl_m
lock dependent by _Travel
authorization dependent by _Travel

// Specify the draft table - will be created automatically by RAP framework
draft table zats_ak_dr_bsupp

etag master LastChangedAt
early numbering // This is to ensure that booksuppl ID is created with number range from system
{
  update;
  delete;
  field ( readonly ) BookingId, TravelId, BookingSupplementId;
  field ( mandatory ) Price, SupplementId;
  association _Travel { with draft; } // { with draft; } should be added to enable draft
  association _Booking { with draft; } // { with draft; } should be added to enable draft

  // We need to explicityly provide field mapping here to avoild dump
  // as the field names in root view ZATS_AK_BOOKSUPPL and db table /dmo/booksuppl_m are different
  mapping for /dmo/booksuppl_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }
}

// Define the child behavior entity for attachment
define behavior for ZATS_AK_ATTACHMENT alias Attachment
// Specify the behavior pool class name for attachment Entity. Its good to create separate class compared to Travel
// also, 'unique' indicates that there cant be more behaviour pools created for booking
implementation in class zbp_ats_ak_attach unique
persistent table zats_ak_attach
lock dependent by _Travel
authorization dependent by _Travel

// Specify the draft table - will be created automatically by RAP framework
draft table zats_ak_d_attach

etag master LastChangedAt

{
  update;
  delete;
  field ( numbering : managed ) Id; // Bcz we want id to be created automatically
  field ( readonly ) TravelId, Id;

  // Reconfirm that booking will be created with DRAFT feature
  association _Travel { with draft; }

  // We need to explicityly provide field mapping here to avoild dump
  // as the field names in root view ZATS_AK_ATTACHMENT and db table ZATS_AK_ATTACH are different
  mapping for zats_ak_attach
    {
      TravelId           = travel_id;
      Id                 = id;
      Memo               = memo;
      Attachment         = attachment;
      Filename           = filename;
      Filetype           = filetype;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}